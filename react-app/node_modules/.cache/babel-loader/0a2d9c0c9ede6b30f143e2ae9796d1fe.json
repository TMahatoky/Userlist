{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shield = void 0;\n\nconst hash = require(\"object-hash\");\n\nconst graphql_middleware_1 = require(\"graphql-middleware\");\n\nconst validation_1 = require(\"./validation\");\n\nconst generator_1 = require(\"./generator\");\n\nconst constructors_1 = require(\"./constructors\");\n\nconst utils_1 = require(\"./utils\");\n/**\n *\n * @param options\n *\n * Makes sure all of defined rules are in accord with the options\n * shield can process.\n *\n */\n\n\nfunction normalizeOptions(options) {\n  if (typeof options.fallbackError === 'string') {\n    options.fallbackError = new Error(options.fallbackError);\n  }\n\n  return {\n    debug: options.debug !== undefined ? options.debug : false,\n    allowExternalErrors: utils_1.withDefault(false)(options.allowExternalErrors),\n    fallbackRule: utils_1.withDefault(constructors_1.allow)(options.fallbackRule),\n    fallbackError: utils_1.withDefault(new Error('Not Authorised!'))(options.fallbackError),\n    hashFunction: utils_1.withDefault(hash)(options.hashFunction)\n  };\n}\n/**\n *\n * @param ruleTree\n * @param options\n *\n * Validates rules and generates middleware from defined rule tree.\n *\n */\n\n\nfunction shield(ruleTree) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const normalizedOptions = normalizeOptions(options);\n  const ruleTreeValidity = validation_1.validateRuleTree(ruleTree);\n\n  if (ruleTreeValidity.status === 'ok') {\n    const generatorFunction = generator_1.generateMiddlewareGeneratorFromRuleTree(ruleTree, normalizedOptions);\n    return graphql_middleware_1.middleware(generatorFunction);\n  } else {\n    throw new validation_1.ValidationError(ruleTreeValidity.message);\n  }\n}\n\nexports.shield = shield;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AASA;;AACA;;AACA;AAEA;;;;;;;;;;AAQA,SAASA,gBAAT,CAA0BC,OAA1B,EAAsD;EACpD,IAAI,OAAOA,OAAO,CAACC,aAAf,KAAiC,QAArC,EAA+C;IAC7CD,OAAO,CAACC,aAAR,GAAwB,IAAIC,KAAJ,CAAUF,OAAO,CAACC,aAAlB,CAAxB;EACD;;EAED,OAAO;IACLE,KAAK,EAAEH,OAAO,CAACG,KAAR,KAAkBC,SAAlB,GAA8BJ,OAAO,CAACG,KAAtC,GAA8C,KADhD;IAELE,mBAAmB,EAAEC,oBAAY,KAAZ,EAAmBN,OAAO,CAACK,mBAA3B,CAFhB;IAGLE,YAAY,EAAED,oBAAwBE,oBAAxB,EAA+BR,OAAO,CAACO,YAAvC,CAHT;IAILN,aAAa,EAAEK,oBACb,IAAIJ,KAAJ,CAAU,iBAAV,CADa,EAEbF,OAAO,CAACC,aAFK,CAJV;IAOLQ,YAAY,EAAEH,oBAA2BI,IAA3B,EAAiCV,OAAO,CAACS,YAAzC;EAPT,CAAP;AASD;AAED;;;;;;;;;;AAQA,SAAgBE,MAAhB,CACEC,QADF,EAEmC;EAAA,IAAjCZ,OAAiC,uEAAF,EAAE;EAEjC,MAAMa,iBAAiB,GAAGd,gBAAgB,CAACC,OAAD,CAA1C;EACA,MAAMc,gBAAgB,GAAGC,8BAAiBH,QAAjB,CAAzB;;EAEA,IAAIE,gBAAgB,CAACE,MAAjB,KAA4B,IAAhC,EAAsC;IACpC,MAAMC,iBAAiB,GAAGC,oDAIxBN,QAJwB,EAIdC,iBAJc,CAA1B;IAMA,OAAOM,gCAAWF,iBAAX,CAAP;EACD,CARD,MAQO;IACL,MAAM,IAAIF,4BAAJ,CAAoBD,gBAAgB,CAACM,OAArC,CAAN;EACD;AACF;;AAlBDC","names":["normalizeOptions","options","fallbackError","Error","debug","undefined","allowExternalErrors","utils_1","fallbackRule","constructors_1","hashFunction","hash","shield","ruleTree","normalizedOptions","ruleTreeValidity","validation_1","status","generatorFunction","generator_1","graphql_middleware_1","message","exports"],"sources":["../src/shield.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}