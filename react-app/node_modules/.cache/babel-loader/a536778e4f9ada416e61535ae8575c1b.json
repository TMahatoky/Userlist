{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst graphql = require('graphql');\n\nfunction extractFragmentReplacements(resolvers) {\n  const allFragmentReplacements = [];\n\n  for (const typeName in resolvers) {\n    const fieldResolvers = resolvers[typeName];\n\n    for (const fieldName in fieldResolvers) {\n      const fieldResolver = fieldResolvers[fieldName];\n\n      if (typeof fieldResolver === \"object\" && fieldResolver.fragment) {\n        allFragmentReplacements.push({\n          field: fieldName,\n          fragment: fieldResolver.fragment\n        });\n      }\n\n      if (typeof fieldResolver === \"object\" && fieldResolver.fragments) {\n        for (const fragment of fieldResolver.fragments) {\n          allFragmentReplacements.push({\n            field: fieldName,\n            fragment\n          });\n        }\n      }\n    }\n  }\n\n  const fragmentReplacements = allFragmentReplacements.filter(fragment => Boolean(fragment)).map(fragmentReplacement => {\n    const fragment = parseFragmentToInlineFragment(fragmentReplacement.fragment);\n    const newSelections = fragment.selectionSet.selections.filter(node => {\n      switch (node.kind) {\n        case graphql.Kind.FIELD:\n          {\n            return node.name.value !== fragmentReplacement.field;\n          }\n\n        default:\n          {\n            return true;\n          }\n      }\n    });\n\n    if (newSelections.length === 0) {\n      return null;\n    }\n\n    const newFragment = { ...fragment,\n      selectionSet: {\n        kind: fragment.selectionSet.kind,\n        loc: fragment.selectionSet.loc,\n        selections: newSelections\n      }\n    };\n    const parsedFragment = graphql.print(newFragment);\n    return {\n      field: fragmentReplacement.field,\n      fragment: parsedFragment\n    };\n  }).filter(fr => fr !== null);\n  return fragmentReplacements;\n\n  function parseFragmentToInlineFragment(definitions) {\n    if (definitions.trim().startsWith(\"fragment\")) {\n      const document = graphql.parse(definitions);\n\n      for (const definition of document.definitions) {\n        if (definition.kind === graphql.Kind.FRAGMENT_DEFINITION) {\n          return {\n            kind: graphql.Kind.INLINE_FRAGMENT,\n            typeCondition: definition.typeCondition,\n            selectionSet: definition.selectionSet\n          };\n        }\n      }\n    }\n\n    const query = graphql.parse(`{${definitions}}`).definitions[0];\n\n    for (const selection of query.selectionSet.selections) {\n      if (selection.kind === graphql.Kind.INLINE_FRAGMENT) {\n        return selection;\n      }\n    }\n\n    throw new Error(\"Could not parse fragment\");\n  }\n}\n\nexports.extractFragmentReplacements = extractFragmentReplacements;","map":{"version":3,"names":["Object","defineProperty","exports","value","graphql","require","extractFragmentReplacements","resolvers","allFragmentReplacements","typeName","fieldResolvers","fieldName","fieldResolver","fragment","push","field","fragments","fragmentReplacements","filter","Boolean","map","fragmentReplacement","parseFragmentToInlineFragment","newSelections","selectionSet","selections","node","kind","Kind","FIELD","name","length","newFragment","loc","parsedFragment","print","fr","definitions","trim","startsWith","document","parse","definition","FRAGMENT_DEFINITION","INLINE_FRAGMENT","typeCondition","query","selection","Error"],"sources":["C:/Users/User/node_modules/graphql-middleware/dist/fragments.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst graphql = require('graphql');\n\nfunction extractFragmentReplacements(resolvers) {\n  const allFragmentReplacements = [];\n  for (const typeName in resolvers) {\n    const fieldResolvers = resolvers[typeName];\n    for (const fieldName in fieldResolvers) {\n      const fieldResolver = fieldResolvers[fieldName];\n      if (typeof fieldResolver === \"object\" && fieldResolver.fragment) {\n        allFragmentReplacements.push({\n          field: fieldName,\n          fragment: fieldResolver.fragment\n        });\n      }\n      if (typeof fieldResolver === \"object\" && fieldResolver.fragments) {\n        for (const fragment of fieldResolver.fragments) {\n          allFragmentReplacements.push({\n            field: fieldName,\n            fragment\n          });\n        }\n      }\n    }\n  }\n  const fragmentReplacements = allFragmentReplacements.filter((fragment) => Boolean(fragment)).map((fragmentReplacement) => {\n    const fragment = parseFragmentToInlineFragment(fragmentReplacement.fragment);\n    const newSelections = fragment.selectionSet.selections.filter((node) => {\n      switch (node.kind) {\n        case graphql.Kind.FIELD: {\n          return node.name.value !== fragmentReplacement.field;\n        }\n        default: {\n          return true;\n        }\n      }\n    });\n    if (newSelections.length === 0) {\n      return null;\n    }\n    const newFragment = {\n      ...fragment,\n      selectionSet: {\n        kind: fragment.selectionSet.kind,\n        loc: fragment.selectionSet.loc,\n        selections: newSelections\n      }\n    };\n    const parsedFragment = graphql.print(newFragment);\n    return {\n      field: fragmentReplacement.field,\n      fragment: parsedFragment\n    };\n  }).filter((fr) => fr !== null);\n  return fragmentReplacements;\n  function parseFragmentToInlineFragment(definitions) {\n    if (definitions.trim().startsWith(\"fragment\")) {\n      const document = graphql.parse(definitions);\n      for (const definition of document.definitions) {\n        if (definition.kind === graphql.Kind.FRAGMENT_DEFINITION) {\n          return {\n            kind: graphql.Kind.INLINE_FRAGMENT,\n            typeCondition: definition.typeCondition,\n            selectionSet: definition.selectionSet\n          };\n        }\n      }\n    }\n    const query = graphql.parse(`{${definitions}}`).definitions[0];\n    for (const selection of query.selectionSet.selections) {\n      if (selection.kind === graphql.Kind.INLINE_FRAGMENT) {\n        return selection;\n      }\n    }\n    throw new Error(\"Could not parse fragment\");\n  }\n}\n\nexports.extractFragmentReplacements = extractFragmentReplacements;\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,SAASC,2BAAT,CAAqCC,SAArC,EAAgD;EAC9C,MAAMC,uBAAuB,GAAG,EAAhC;;EACA,KAAK,MAAMC,QAAX,IAAuBF,SAAvB,EAAkC;IAChC,MAAMG,cAAc,GAAGH,SAAS,CAACE,QAAD,CAAhC;;IACA,KAAK,MAAME,SAAX,IAAwBD,cAAxB,EAAwC;MACtC,MAAME,aAAa,GAAGF,cAAc,CAACC,SAAD,CAApC;;MACA,IAAI,OAAOC,aAAP,KAAyB,QAAzB,IAAqCA,aAAa,CAACC,QAAvD,EAAiE;QAC/DL,uBAAuB,CAACM,IAAxB,CAA6B;UAC3BC,KAAK,EAAEJ,SADoB;UAE3BE,QAAQ,EAAED,aAAa,CAACC;QAFG,CAA7B;MAID;;MACD,IAAI,OAAOD,aAAP,KAAyB,QAAzB,IAAqCA,aAAa,CAACI,SAAvD,EAAkE;QAChE,KAAK,MAAMH,QAAX,IAAuBD,aAAa,CAACI,SAArC,EAAgD;UAC9CR,uBAAuB,CAACM,IAAxB,CAA6B;YAC3BC,KAAK,EAAEJ,SADoB;YAE3BE;UAF2B,CAA7B;QAID;MACF;IACF;EACF;;EACD,MAAMI,oBAAoB,GAAGT,uBAAuB,CAACU,MAAxB,CAAgCL,QAAD,IAAcM,OAAO,CAACN,QAAD,CAApD,EAAgEO,GAAhE,CAAqEC,mBAAD,IAAyB;IACxH,MAAMR,QAAQ,GAAGS,6BAA6B,CAACD,mBAAmB,CAACR,QAArB,CAA9C;IACA,MAAMU,aAAa,GAAGV,QAAQ,CAACW,YAAT,CAAsBC,UAAtB,CAAiCP,MAAjC,CAAyCQ,IAAD,IAAU;MACtE,QAAQA,IAAI,CAACC,IAAb;QACE,KAAKvB,OAAO,CAACwB,IAAR,CAAaC,KAAlB;UAAyB;YACvB,OAAOH,IAAI,CAACI,IAAL,CAAU3B,KAAV,KAAoBkB,mBAAmB,CAACN,KAA/C;UACD;;QACD;UAAS;YACP,OAAO,IAAP;UACD;MANH;IAQD,CATqB,CAAtB;;IAUA,IAAIQ,aAAa,CAACQ,MAAd,KAAyB,CAA7B,EAAgC;MAC9B,OAAO,IAAP;IACD;;IACD,MAAMC,WAAW,GAAG,EAClB,GAAGnB,QADe;MAElBW,YAAY,EAAE;QACZG,IAAI,EAAEd,QAAQ,CAACW,YAAT,CAAsBG,IADhB;QAEZM,GAAG,EAAEpB,QAAQ,CAACW,YAAT,CAAsBS,GAFf;QAGZR,UAAU,EAAEF;MAHA;IAFI,CAApB;IAQA,MAAMW,cAAc,GAAG9B,OAAO,CAAC+B,KAAR,CAAcH,WAAd,CAAvB;IACA,OAAO;MACLjB,KAAK,EAAEM,mBAAmB,CAACN,KADtB;MAELF,QAAQ,EAAEqB;IAFL,CAAP;EAID,CA5B4B,EA4B1BhB,MA5B0B,CA4BlBkB,EAAD,IAAQA,EAAE,KAAK,IA5BI,CAA7B;EA6BA,OAAOnB,oBAAP;;EACA,SAASK,6BAAT,CAAuCe,WAAvC,EAAoD;IAClD,IAAIA,WAAW,CAACC,IAAZ,GAAmBC,UAAnB,CAA8B,UAA9B,CAAJ,EAA+C;MAC7C,MAAMC,QAAQ,GAAGpC,OAAO,CAACqC,KAAR,CAAcJ,WAAd,CAAjB;;MACA,KAAK,MAAMK,UAAX,IAAyBF,QAAQ,CAACH,WAAlC,EAA+C;QAC7C,IAAIK,UAAU,CAACf,IAAX,KAAoBvB,OAAO,CAACwB,IAAR,CAAae,mBAArC,EAA0D;UACxD,OAAO;YACLhB,IAAI,EAAEvB,OAAO,CAACwB,IAAR,CAAagB,eADd;YAELC,aAAa,EAAEH,UAAU,CAACG,aAFrB;YAGLrB,YAAY,EAAEkB,UAAU,CAAClB;UAHpB,CAAP;QAKD;MACF;IACF;;IACD,MAAMsB,KAAK,GAAG1C,OAAO,CAACqC,KAAR,CAAe,IAAGJ,WAAY,GAA9B,EAAkCA,WAAlC,CAA8C,CAA9C,CAAd;;IACA,KAAK,MAAMU,SAAX,IAAwBD,KAAK,CAACtB,YAAN,CAAmBC,UAA3C,EAAuD;MACrD,IAAIsB,SAAS,CAACpB,IAAV,KAAmBvB,OAAO,CAACwB,IAAR,CAAagB,eAApC,EAAqD;QACnD,OAAOG,SAAP;MACD;IACF;;IACD,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;EACD;AACF;;AAED9C,OAAO,CAACI,2BAAR,GAAsCA,2BAAtC"},"metadata":{},"sourceType":"script"}