{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationError = exports.validateRuleTree = void 0;\n\nconst utils_1 = require(\"./utils\");\n/**\n *\n * @param ruleTree\n *\n * Validates the rule tree declaration by checking references of rule\n * functions. We deem rule tree valid if no two rules with the same name point\n * to different rules.\n *\n */\n\n\nfunction validateRuleTree(ruleTree) {\n  const rules = extractRules(ruleTree);\n  const valid = rules.reduce((_ref, rule) => {\n    let {\n      map,\n      duplicates\n    } = _ref;\n\n    if (!map.has(rule.name)) {\n      return {\n        map: map.set(rule.name, rule),\n        duplicates\n      };\n    } else if (!map.get(rule.name).equals(rule) && !duplicates.includes(rule.name)) {\n      return {\n        map: map.set(rule.name, rule),\n        duplicates: [...duplicates, rule.name]\n      };\n    } else {\n      return {\n        map,\n        duplicates\n      };\n    }\n  }, {\n    map: new Map(),\n    duplicates: []\n  });\n\n  if (valid.duplicates.length === 0) {\n    return {\n      status: 'ok'\n    };\n  } else {\n    const duplicates = valid.duplicates.join(', ');\n    return {\n      status: 'err',\n      message: `There seem to be multiple definitions of these rules: ${duplicates}`\n    };\n  }\n  /* Helper functions */\n\n  /**\n   *\n   * @param ruleTree\n   *\n   * Extracts rules from rule tree.\n   *\n   */\n\n\n  function extractRules(ruleTree) {\n    const resolvers = utils_1.flattenObjectOf(ruleTree, utils_1.isRuleFunction);\n    const rules = resolvers.reduce((rules, rule) => {\n      if (utils_1.isLogicRule(rule)) {\n        return [...rules, ...extractLogicRules(rule)];\n      } else {\n        return [...rules, rule];\n      }\n    }, []);\n    return rules;\n  }\n  /**\n   *\n   * Recursively extracts Rules from LogicRule\n   *\n   * @param rule\n   */\n\n\n  function extractLogicRules(rule) {\n    return rule.getRules().reduce((acc, shieldRule) => {\n      if (utils_1.isLogicRule(shieldRule)) {\n        return [...acc, ...extractLogicRules(shieldRule)];\n      } else {\n        return [...acc, shieldRule];\n      }\n    }, []);\n  }\n}\n\nexports.validateRuleTree = validateRuleTree;\n\nclass ValidationError extends Error {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ValidationError = ValidationError;","map":{"version":3,"mappings":";;;;;;;AACA;AAEA;;;;;;;;;;;AASA,SAAgBA,gBAAhB,CACEC,QADF,EACkB;EAEhB,MAAMC,KAAK,GAAGC,YAAY,CAACF,QAAD,CAA1B;EAEA,MAAMG,KAAK,GAAGF,KAAK,CAACG,MAAN,CACZ,OAAsBC,IAAtB,KAA8B;IAAA,IAA7B;MAAEC,GAAF;MAAOC;IAAP,CAA6B;;IAC5B,IAAI,CAACD,GAAG,CAACE,GAAJ,CAAQH,IAAI,CAACI,IAAb,CAAL,EAAyB;MACvB,OAAO;QAAEH,GAAG,EAAEA,GAAG,CAACI,GAAJ,CAAQL,IAAI,CAACI,IAAb,EAAmBJ,IAAnB,CAAP;QAAiCE;MAAjC,CAAP;IACD,CAFD,MAEO,IACL,CAACD,GAAG,CAACK,GAAJ,CAAQN,IAAI,CAACI,IAAb,EAAoBG,MAApB,CAA2BP,IAA3B,CAAD,IACA,CAACE,UAAU,CAACM,QAAX,CAAoBR,IAAI,CAACI,IAAzB,CAFI,EAGL;MACA,OAAO;QACLH,GAAG,EAAEA,GAAG,CAACI,GAAJ,CAAQL,IAAI,CAACI,IAAb,EAAmBJ,IAAnB,CADA;QAELE,UAAU,EAAE,CAAC,GAAGA,UAAJ,EAAgBF,IAAI,CAACI,IAArB;MAFP,CAAP;IAID,CARM,MAQA;MACL,OAAO;QAAEH,GAAF;QAAOC;MAAP,CAAP;IACD;EACF,CAfW,EAgBZ;IAAED,GAAG,EAAE,IAAIQ,GAAJ,EAAP;IAAiCP,UAAU,EAAE;EAA7C,CAhBY,CAAd;;EAmBA,IAAIJ,KAAK,CAACI,UAAN,CAAiBQ,MAAjB,KAA4B,CAAhC,EAAmC;IACjC,OAAO;MAAEC,MAAM,EAAE;IAAV,CAAP;EACD,CAFD,MAEO;IACL,MAAMT,UAAU,GAAGJ,KAAK,CAACI,UAAN,CAAiBU,IAAjB,CAAsB,IAAtB,CAAnB;IACA,OAAO;MACLD,MAAM,EAAE,KADH;MAELE,OAAO,EAAE,yDAAyDX,UAAU;IAFvE,CAAP;EAID;EAED;;EACA;;;;;;;;;EAOA,SAASL,YAAT,CAAsBF,QAAtB,EAAsC;IACpC,MAAMmB,SAAS,GAAGC,wBAA4BpB,QAA5B,EAAsCoB,sBAAtC,CAAlB;IAEA,MAAMnB,KAAK,GAAGkB,SAAS,CAACf,MAAV,CAA0B,CAACH,KAAD,EAAQI,IAAR,KAAgB;MACtD,IAAIe,oBAAYf,IAAZ,CAAJ,EAAuB;QACrB,OAAO,CAAC,GAAGJ,KAAJ,EAAW,GAAGoB,iBAAiB,CAAChB,IAAD,CAA/B,CAAP;MACD,CAFD,MAEO;QACL,OAAO,CAAC,GAAGJ,KAAJ,EAAWI,IAAX,CAAP;MACD;IACF,CANa,EAMX,EANW,CAAd;IAQA,OAAOJ,KAAP;EACD;EAED;;;;;;;;EAMA,SAASoB,iBAAT,CAA2BhB,IAA3B,EAA2C;IACzC,OAAOA,IAAI,CAACiB,QAAL,GAAgBlB,MAAhB,CAAgC,CAACmB,GAAD,EAAMC,UAAN,KAAoB;MACzD,IAAIJ,oBAAYI,UAAZ,CAAJ,EAA6B;QAC3B,OAAO,CAAC,GAAGD,GAAJ,EAAS,GAAGF,iBAAiB,CAACG,UAAD,CAA7B,CAAP;MACD,CAFD,MAEO;QACL,OAAO,CAAC,GAAGD,GAAJ,EAASC,UAAT,CAAP;MACD;IACF,CANM,EAMJ,EANI,CAAP;EAOD;AACF;;AAvEDC;;AAyEA,MAAaC,eAAb,SAAqCC,KAArC,CAA0C;EACxCC,YAAYV,OAAZ,EAA2B;IACzB,MAAMA,OAAN;EACD;;AAHuC;;AAA1CO","names":["validateRuleTree","ruleTree","rules","extractRules","valid","reduce","rule","map","duplicates","has","name","set","get","equals","includes","Map","length","status","join","message","resolvers","utils_1","extractLogicRules","getRules","acc","shieldRule","exports","ValidationError","Error","constructor"],"sources":["../src/validation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}